@function convert-angle($value, $unit) {
    $convertable-units: deg grad turn rad;
    $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
    @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
        @return $value / nth($conversion-factors, index($convertable-units, unit($value))) *
            nth($conversion-factors, index($convertable-units, $unit));
    }

    @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}

@function is-direction($value) {
    $is-direction: index(
        (
            to top,
            to top right,
            to right top,
            to right,
            to bottom right,
            to right bottom,
            to bottom,
            to bottom left,
            to left bottom,
            to left,
            to left top,
            to top left
        ),
        $value
    );
    $is-angle: type-of($value) == "number" and index("deg" "grad" "turn" "rad", unit($value));

    @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
    @if is-direction($value) == false {
        @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
    }

    $conversion-map: (
        to top: bottom,
        to top right: bottom left,
        to right top: left bottom,
        to right: left,
        to bottom right: top left,
        to right bottom: left top,
        to bottom: top,
        to bottom left: top right,
        to left bottom: right top,
        to left: right,
        to left top: right bottom,
        to top left: bottom right
    );

    @if map-has-key($conversion-map, $value) {
        @return map-get($conversion-map, $value);
    }

    @return 90deg - convert-angle($value, "deg");
}

/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
    @if is-direction($direction) == false {
        $color-stops: ($direction, $color-stops);
        $direction: 180deg;
    }

    background-image: nth(nth($color-stops, 1), 1);
    background-image: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background-image: linear-gradient($direction, $color-stops);
}

@mixin linear-gradient-image($img, $direction, $color-stops...) {
    @if is-direction($direction) == false {
        $color-stops: ($direction, $color-stops);
        $direction: 180deg;
    }

    background: -moz-linear-gradient($direction, $color-stops), url($img) no-repeat;
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops), url($img) no-repeat;
    background: -o-linear-gradient($direction, $color-stops), url($img) no-repeat;
    background: -ms-linear-gradient($direction, $color-stops), url($img) no-repeat;
    background: linear-gradient($direction, $color-stops), url($img) no-repeat;
}

@mixin linear-gradient-image-color($color, $img, $direction, $color-stops...) {
    @if is-direction($direction) == false {
        $color-stops: ($direction, $color-stops);
        $direction: 180deg;
    }

    @if $color == null {
        $color: rgb(0, 0, 0, 0.6);
    }

    background: -moz-linear-gradient($direction, $color-stops), url($img) no-repeat, $color;
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops), url($img) no-repeat, $color;
    background: -o-linear-gradient($direction, $color-stops), url($img) no-repeat, $color;
    background: -ms-linear-gradient($direction, $color-stops), url($img) no-repeat, $color;
    background: linear-gradient($direction, $color-stops), url($img) no-repeat, $color;
}

@mixin text-shadow($x1, $y1, $blur1, $color1, $x2: null, $y2: null, $blur2: null, $color2: null) {
    @if ($x2) {
        text-shadow: $x1 $y1 $blur1 $color1, $x2 $y2 $blur2 $color2;
    } @else {
        text-shadow: $x1 $y1 $blur1 $color1;
    }
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
    @if $inset {
        -webkit-box-shadow: inset $top $left $blur $color;
        -moz-box-shadow: inset $top $left $blur $color;
        box-shadow: inset $top $left $blur $color;
    } @else {
        -webkit-box-shadow: $top $left $blur $color;
        -moz-box-shadow: $top $left $blur $color;
        box-shadow: $top $left $blur $color;
    }
}

// keyframes mixin
@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }
    @-moz-keyframes #{$name} {
        @content;
    }
    @-ms-keyframes #{$name} {
        @content;
    }
    @keyframes #{$name} {
        @content;
    }
}

@mixin animation($str) {
    -webkit-animation: #{$str};
    -moz-animation: #{$str};
    -ms-animation: #{$str};
    -o-animation: #{$str};
    animation: #{$str};
}

@mixin filter($str) {
    -webkit-filter: #{$str};
    -moz-filter: #{$str};
    -o-filter: #{$str};
    -ms-filter: #{$str};
    filter: #{$str};
}

@mixin placeholeder-color($str) {
    &::placeholder {
        color: #{$str};
    }

    &:-ms-input-placeholder {
        color: #{$str};
    }
    &:-moz-input-placeholder {
        color: #{$str};
    }
    &:-o-scrollbar {
        color: #{$str};
    }
}